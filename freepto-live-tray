#!/usr/bin/env python2
'''
GTK helper to know persistence status
'''
from subprocess import call, check_output, CalledProcessError
import logging
logging.basicConfig(level=logging.INFO)
import gtk
import gettext
gettext.textdomain('freepto-usb-utils')
_ = gettext.gettext

try:
    import vte
except:
    error = gtk.MessageDialog(None, flags=gtk.DIALOG_MODAL,
                              type=gtk.MESSAGE_ERROR,
                              buttons=gtk.BUTTONS_OK,
                              message_format=
                              _('You need to install python bindings for libvte')
                              )
    error.run()
    import sys
    sys.exit(1)



title = "Persistence helper"


class PersistenceOptionsFrame(gtk.Frame):

    def __init__(self):
        gtk.Frame.__init__(self, _("Options"))
        box = gtk.Table(3, 2, False)
        self.add(box)

        self.passphrase_label = gtk.Label(_("Passphrase"))
        self.passphrase_input = gtk.Entry()

        self.repeat_passphrase_label = gtk.Label(_("Repeat passphrase"))
        self.repeat_passphrase_input = gtk.Entry()

        self.fill_random_label = gtk.Label(_("Fill with random data"))
        self.fill_random_input = gtk.CheckButton()

        box.attach(self.passphrase_label, 0, 1, 0, 1)
        box.attach(self.passphrase_input, 1, 2, 0, 1)

        box.attach(self.repeat_passphrase_label, 0, 1, 1, 2)
        box.attach(self.repeat_passphrase_input, 1, 2, 1, 2)

        box.attach(self.fill_random_label, 0, 1, 2, 3)
        box.attach(self.fill_random_input, 1, 2, 2, 3)

    def show_error(self, text):
        msg = gtk.MessageDialog(None, flags=gtk.DIALOG_MODAL,
                                type=gtk.MESSAGE_ERROR,
                                buttons=gtk.BUTTONS_OK,
                                message_format=text
                               )

        msg.run()
        msg.destroy()

    def set_sensitive(self, sensitive):
        self.passphrase_input.set_sensitive(sensitive)
        self.repeat_passphrase_input.set_sensitive(sensitive)
        self.fill_random_input.set_sensitive(sensitive)


class PersistenceTerminal(gtk.Frame):

    def __init__(self):
        gtk.Frame.__init__(self, _('Make persistence details'))

        self.term = vte.Terminal()
        self.term.set_emulation('xterm')

        scrollbar = gtk.VScrollbar()
        scrollbar.set_adjustment(self.term.get_adjustment())

        term_box = gtk.HBox()
        term_box.pack_start(self.term)
        term_box.pack_start(scrollbar)

        self.add(term_box)

    def fork_command(self, command):
        self.term.fork_command(command[0], command)

    def set_post_persistence(self, post_persistence):
        code = self.term.get_child_exit_status()
        self.term.connect('child-exited',
                 lambda term: post_persistence(code))


class Window(gtk.Window):

    def __init__(self, icon):
        gtk.Window.__init__(self, gtk.WINDOW_TOPLEVEL)
        self.set_title(title)
        self.icon = icon

        self.box = gtk.VBox(False, 0)
        self.add(self.box)

        menu_bar = gtk.MenuBar()
        menu_bar.append(self.get_file_menu())
        menu_bar.append(self.get_help_menu())

        self.box.add(menu_bar)
        self.box.add(self.get_info())
        
    def get_file_menu(self):
        file_menu = gtk.MenuItem('File')
        file_submenu = gtk.Menu()

        refresh = gtk.ImageMenuItem(gtk.STOCK_REFRESH, _('Refresh'))
        refresh.connect('activate', self.refresh)
        exit = gtk.ImageMenuItem(gtk.STOCK_QUIT, _('Exit'))
        exit.connect('activate', gtk.main_quit)

        file_menu.set_submenu(file_submenu)
        file_submenu.append(refresh)
        file_submenu.append(exit)

        return file_menu

    def get_help_menu(Self):
        help_menu = gtk.MenuItem(_('Help'))
        help_submenu = gtk.Menu()

        about = gtk.ImageMenuItem(gtk.STOCK_ABOUT, _('About'))

        help_menu.set_submenu(help_submenu)
        help_submenu.append(about)
 
        return help_menu


    def refresh(self, widget, data=None):
        self.icon.refresh_icon()

    def get_info(self):
        device_label = gtk.Label(_('Device'))
        device = gtk.Label(self.get_root_device())
        persistence_avai_label = gtk.Label(_('Persistence available'))
        persistence_avai_text = _('No') if self.icon.status == 'ABSENT' else _('Yes')
        persistence_avai = gtk.Label(persistence_avai_text)
        persistence_mount_label = gtk.Label(_('Persistence mounted'))
        persistence_mount_text = _('Yes') if self.icon.status == 'MOUNT' else _('No')
        persistence_mount = gtk.Label(persistence_mount_text)

        table = gtk.Table(3, 2)
        table.attach(device_label, 0, 1, 0, 1)
        table.attach(device, 1, 2, 0, 1)
        table.attach(persistence_avai_label, 0, 1, 1, 2)
        table.attach(persistence_avai, 1, 2, 1, 2)
        table.attach(persistence_mount_label, 0, 1, 2, 3)
        table.attach(persistence_mount, 1, 2, 2, 3)

        frame = gtk.Frame(_('Device info'))
        frame.add(table)
        return frame

    def get_root_device(self):
        try:
            return check_output(["check-persistence", "get-root-device"]).strip()
        except CalledProcessError:
            return None


class AbsentWindow(Window):

    def __init__(self, icon):
        Window.__init__(self, icon)
        self.options_frame = PersistenceOptionsFrame()
        self.progress_bar = gtk.ProgressBar()
        self.progress_label = gtk.Label()
        self.button = gtk.Button(_("Create persistence"))

        if self.get_root_device() is not None:
            label = gtk.Label(_("Persistence not available (do you want to create it?)"))
            self.button.connect('clicked', self.make_persistence)
            self.box.add(label)
            self.box.add(self.options_frame)
            self.box.add(self.button)
            self.box.add(self.progress_label)
            self.box.add(self.progress_bar)
            self.show_all()
            self.progress_bar.hide()
            self.progress_label.hide()
        else:
            label = gtk.Label(_("Disk not found"))

    def check_options(self):
        passphrase = self.options_frame.passphrase_input.get_text()
        repeat_passphrase = self.options_frame.repeat_passphrase_input.get_text()
        if passphrase != repeat_passphrase:
            self.options_frame.show_error(_("Passphrase mismatch."))
            return False
        elif len(passphrase) < 8:
            self.options_frame.show_error(_("Passphrase must be at least 8 characters."))
            return False
        else:
            return True

    def make_persistence(self, widget, data=None):
        if self.check_options():
            self.options_frame.set_sensitive(False)
            self.button.set_sensitive(False)
            self.progress_bar.set_fraction(0.5)
            self.progress_bar.set_text("Creating persistence...")
            self.progress_bar.show()
            self.create_persistence()

    def create_persistence(self):
        '''apre un terminale ed esegue lo script indicato in command'''
        passphrase = self.options_frame.passphrase_input.get_text()
        fill_random = self.options_frame.fill_random_input.get_active()
        command = ["makepersistence", "-p", passphrase, "%s2" % self.get_root_device()]
        if not fill_random:
            command.insert(1, "-r")
        if os.getuid() != 0:
            command = ["su-to-root", "-X", "-c", " ".join(command)]

        term = PersistenceTerminal()
        term.set_post_persistence(self.post_persistence)
        term.fork_command(command)

        self.box.add(term)
        self.show_all()

    def post_persistence(self, ret_code):
        '''
        cose da fare dopo che lo script makepersistence ha fatto il suo
        sporco lavoro.
        attualmente ricontrollo lo status della persistenza, aggiorno
        l'icona
        '''
        icon.refresh_persistence_status()
        self.icon.refresh_icon()

        if ret_code == 0:
            self.progress_bar.set_fraction(1)
            self.progress_bar.set_text(_('Completed'))
            info = _('Persistence created! You must reboot the system to use it.')
            self.progress_label.set_markup(info)
            msg = gtk.MessageDialog(None, flags=gtk.DIALOG_MODAL,
                                    buttons=gtk.BUTTONS_OK,
                                    type=gtk.MESSAGE_INFO,
                                    message_format=info)
        else:
            info = _('Errors in persistence creation.\n\nCode: %s' % ret)
            self.progress_label.set_markup(info)
            msg = gtk.MessageDialog(None, flags=gtk.DIALOG_MODAL,
                                    buttons=gtk.BUTTONS_OK,
                                    type=gtk.MESSAGE_ERROR,
                                    message_format=info)
        self.progress_label.show()
        msg.run()
        msg.destroy()


class MountedWindow(Window):

    def __init__(self, icon):
        Window.__init__(self, icon)
        label = gtk.Label(_("Persistence mounted."))
        self.box.add(label)
        self.show_all()


class LiveWindow(Window):

    def __init__(self, icon):
        Window.__init__(self, icon)
        label = gtk.Label(_("Persistence no mounted, but available (maybe you want to reboot?)"))
        self.box.add(label)
        self.show_all()


class LiveIcon:
    '''
    A status icon with 3 possible statuses:
        MOUNTED
        LIVE
        ABSENT
    '''

    def __init__(self):
        self.icon = gtk.StatusIcon()
        self.status = None
        self.refresh_icon()
        self.refresh_persistence_status()
        self.dialog = None
        self.refresh_icon()
        self.icon.connect("activate", self.show_popup)
        self.icon.connect("popup-menu", self.right_click_event)

    def refresh_icon(self):
        if self.status == 'MOUNTED':
            self.icon.set_from_stock(gtk.STOCK_YES)
            self.icon.set_tooltip(_("Persistence mounted"))
        elif self.status == 'LIVE':
            self.icon.set_from_stock(gtk.STOCK_NO)
            self.icon.set_tooltip(_("Persistence not mounted, but available (maybe you want to reboot?)"))
        elif self.status == 'ABSENT':
            self.icon.set_from_stock(gtk.STOCK_CDROM)
            self.icon.set_tooltip(_("Persistence not available (do you want to create it?)"))
        else:
            self.icon.set_from_stock(gtk.STOCK_NEW)
            self.icon.set_tooltip(_('Checking...'))

    def right_click_event(self, icon, button, time):
        menu = gtk.Menu()
        quit = gtk.MenuItem(_("Quit"))
        quit.connect("activate", gtk.main_quit)
        menu.append(quit)
        menu.show_all()
        menu.popup(None, None, gtk.status_icon_position_menu,
                   button, time, self.icon)

    def show_popup(self, widget):
        '''
        this is the main informational popup; will show basic informational
        and act as "wizard"
        '''
        if self.dialog:
            logging.debug("already open")
            self.dialog.destroy()
            return

        if self.status == 'ABSENT':
            if self.is_virtualized():
                window = AbsentWindow(self)
        elif self.status == 'LIVE':
            window = LiveWindow(self)
        else:
            window = MountedWindow(self)

    def is_virtualized(self):
        if self.check_virtualization() == "VIRTUAL":
            self.dialog = gtk.MessageDialog(None, flags=gtk.DIALOG_MODAL,
                                            type=gtk.MESSAGE_QUESTION,
                                            buttons=gtk.BUTTONS_YES_NO)
            self.dialog.set_markup(_("Freepto seems running on a virtual machine. This could be a risk for your privacy. Do you want to continue?"))
            self.dialog.set_title(_("Virtualization Checking"))
            virtresponse = self.dialog.run()
            self.dialog.destroy()
            self.dialog = None
        else:
            ''' if not virtualization detected,
            set virtrespose variable to yes '''
            virtresponse = gtk.RESPONSE_YES
        if virtresponse == gtk.RESPONSE_YES:
            return True
        else:
            return False

    def check_virtualization(self):
        '''
        check if freepto is running on a virtualized system.
        return values:
            VIRTUAL
            NOTVIRTUAL
        '''
        def sub_check(subcmd):
            virt = call(['check-virt', subcmd])
            if virt == 0:
                return False
            if virt == 10:
                return True
            raise Exception('Error checking virtualization status')
        if sub_check('is_virtual'):
            return 'VIRTUAL'
        return 'NOTVIRTUAL'

    def refresh_persistence_status(self):
        '''return one of MOUNTED, LIVE, ABSENT'''
        try:
            def sub_check(subcmd):
                ret = call(['check-persistence', subcmd])
                if ret == 0:
                    return True
                if ret == 10:
                    return False
                raise Exception('Error checking persistence status')
            if sub_check('is-mounted'):
                self.status = 'MOUNTED'
            if sub_check('has-avail-persistence'):
                self.status = 'LIVE'
            else:
                self.status = 'ABSENT'
        except Exception:
            logging.exception("Status unknown")




if __name__ == '__main__':
    import os
    os.environ['PATH'] += ':.'
    icon = LiveIcon()
    gtk.main()

# vim: set ft=python ts=4 sw=4 et fdm=marker:

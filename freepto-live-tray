#!/usr/bin/env python2
'''
GTK helper to know persistence status
'''
from subprocess import call, check_output, CalledProcessError
import logging
logging.basicConfig(level=logging.INFO)
import gtk
import gettext
gettext.textdomain('freepto-usb-utils')
_ = gettext.gettext
import vte


#{{{ Functions

def get_root_device():
    '''
    Returns the device where Freepto is located
    '''
    try:
        return check_output(["check-persistence", "get-root-device"]).strip()
    except CalledProcessError:
        return None

#}}}


#{{{ Simple widgets

class WrappedLabel(gtk.Label):
    '''
    Just a gtk label with line_wrap set to True
    '''

    def __init__(self, text=''):
        gtk.Label.__init__(self)
        self.set_markup(text)
        self.set_line_wrap(True)
        self.set_alignment(0, 0.5)

#}}}


#{{{ Persistence helper window

class PersistenceHelper(gtk.Window):
    '''
    The main window displayed on tray icon click
    '''

    def __init__(self, icon):
        gtk.Window.__init__(self, gtk.WINDOW_TOPLEVEL)
        self.set_title('Persistence helper')
        self.icon = icon

        main_box = gtk.VBox(False)
        self.add(main_box)

        # Menu
        menu_bar = gtk.MenuBar()
        menu_bar.append(self.get_file_menu())
        menu_bar.append(self.get_help_menu())

        # 2 columns layout
        cols_box = gtk.HBox(False, 6)

        self.helper_box = gtk.VBox(False, 6)
        cols_box.pack_start(self.helper_box, True, padding=10)
        cols_box.pack_start(self.get_info_widget(), False, padding=6)

        main_box.pack_start(menu_bar, False)

        if self.is_virtualized() and self.icon.status == 'ABSENT':
            infobar = gtk.InfoBar()
            infobar.set_message_type(gtk.MESSAGE_WARNING)
            infobar.get_content_area().add(VirtualizedWarning())
            main_box.pack_start(infobar, False)

        main_box.pack_start(cols_box, False)

        self.refresh()

    def is_virtualized(self):
        '''
        Check if freepto is running on a virtualized system.
        '''
        def sub_check(subcmd):
            cmd = ['check-virt', subcmd]
            if os.getuid() != 0:
                cmd.insert(0, 'fakeroot')
            virt = call(cmd)
            if virt == 0:
                return False
            if virt == 10:
                return True
            raise Exception('Error checking virtualization status')
        return sub_check('is_virtual')

    def refresh(self, widget=None, data=None):
        '''
        Refresh icon status and the persistence widget
        '''
        self.icon.refresh()

        # Removing children
        for child in self.helper_box.get_children():
            self.helper_box.remove(child)

        self.helper_box.add(HelperWidget())

        if self.icon.status == 'ABSENT':
            self.helper_box.add(AbsentWidget(self.icon))
        elif self.icon.status == 'LIVE':
            self.helper_box.add(LiveWidget())
        else:
            self.helper_box.add(MountedWidget())

    def get_file_menu(self):
        '''
        Returns the "File" menu
        '''
        file_menu = gtk.MenuItem('File')
        file_submenu = gtk.Menu()

        refresh = gtk.ImageMenuItem(gtk.STOCK_REFRESH, _('Refresh'))
        refresh.connect('activate', self.refresh)
        exit = gtk.ImageMenuItem(gtk.STOCK_QUIT, _('Exit'))
        exit.connect('activate', gtk.main_quit)

        file_menu.set_submenu(file_submenu)
        file_submenu.append(refresh)
        file_submenu.append(exit)

        return file_menu

    def get_help_menu(self):
        '''
        Returns the "Help" menu
        '''
        help_menu = gtk.MenuItem(_('Help'))
        help_submenu = gtk.Menu()

        about = gtk.ImageMenuItem(gtk.STOCK_ABOUT, _('About'))
        about.connect('activate', self.show_about_dialog)

        help_menu.set_submenu(help_submenu)
        help_submenu.append(about)

        return help_menu

    def show_about_dialog(self, widget, data=None):
        dialog = gtk.AboutDialog()
        dialog.set_name('Persistence helper')
        dialog.set_website('https://github.com/AvANa-BBS/freepto-usb-utils')
        dialog.set_comments(_('Persistence helper is a graphical tool to create the encrypted persistence partition for Freepto'))
        dialog.set_authors(['Freepto'])
        dialog.set_version('1.0')
        dialog.run()
        dialog.destroy()

    def get_info_widget(self):
        '''
        Returns the widget with device infos
        '''
        device = get_root_device()
        available = _('No') if self.icon.status == 'ABSENT' else _('Yes')
        mount= _('Yes') if self.icon.status == 'MOUNT' else _('No')

        table = gtk.Table(3, 2)
        table.set_col_spacings(8)
        table.attach(WrappedLabel(_('Freepto device:')), 0, 1, 0, 1)
        table.attach(WrappedLabel(device), 1, 2, 0, 1)

        table.attach(WrappedLabel(_('Persistence available:')), 0, 1, 1, 2)
        table.attach(WrappedLabel(available), 1, 2, 1, 2)

        table.attach(WrappedLabel(_('Persistence mount:')), 0, 1, 2, 3)
        table.attach(WrappedLabel(mount), 1, 2, 2, 3)
        
        frame = gtk.Frame(_('Device info'))
        frame.add(table)

        return frame

#}}}

class HelperWidget(gtk.HBox):

    def __init__(self):
        gtk.HBox.__init__(self, False, 10)
        icon = gtk.Image()
        icon.set_from_stock(gtk.STOCK_DIALOG_INFO, gtk.ICON_SIZE_DIALOG)
        description = WrappedLabel(_('<b>What\' that?</b>\nThe persistence is the encrypted space on Freepto where your data is securely stored.'))
        self.add(icon)
        self.add(description)
        self.show_all()
       

#{{{ Absent widget stuff

class PersistenceOptionsForm(gtk.Frame):
    '''
    Form for persistence creation
    '''

    def __init__(self):
        gtk.Frame.__init__(self, _("Options"))
        box = gtk.VBox(False, 4)
        table = gtk.Table(3, 2, False)
        self.add(box)

        self.passphrase_label = WrappedLabel(_("Passphrase"))
        self.passphrase_input = gtk.Entry()
        self.passphrase_input.set_visibility(False)

        self.repeat_passphrase_label = WrappedLabel(_("Repeat passphrase"))
        self.repeat_passphrase_input = gtk.Entry()
        self.repeat_passphrase_input.set_visibility(False)

        self.fill_random_label = WrappedLabel(_("Fill with random data"))
        self.fill_random_input = gtk.CheckButton()

        self.button = gtk.Button(_("Create persistence"))

        xpadding = 4
        ypadding = 4
        table.attach(self.passphrase_label, 0, 1, 0, 1, \
                        xpadding=xpadding, ypadding=ypadding)
        table.attach(self.passphrase_input, 1, 2, 0, 1, \
                        xpadding=xpadding, ypadding=ypadding)

        table.attach(self.repeat_passphrase_label, 0, 1, 1, 2, \
                        xpadding=xpadding, ypadding=ypadding)
        table.attach(self.repeat_passphrase_input, 1, 2, 1, 2, \
                        xpadding=xpadding, ypadding=ypadding)

        table.attach(self.fill_random_label, 0, 1, 2, 3, \
                        xpadding=xpadding, ypadding=ypadding)
        table.attach(self.fill_random_input, 1, 2, 2, 3, \
                        xpadding=xpadding, ypadding=ypadding)

        box.pack_start(table)
        box.pack_start(self.button, padding=4)

    def show_error(self, text):
        msg = gtk.MessageDialog(None, flags=gtk.DIALOG_MODAL,
                                type=gtk.MESSAGE_ERROR,
                                buttons=gtk.BUTTONS_OK,
                                message_format=text
                               )

        msg.run()
        msg.destroy()

    def set_sensitive(self, sensitive):
        self.passphrase_input.set_sensitive(sensitive)
        self.repeat_passphrase_input.set_sensitive(sensitive)
        self.fill_random_input.set_sensitive(sensitive)
        self.button.set_sensitive(sensitive)

    def validate(self):
        '''
        Check the form
        '''
        passphrase = self.passphrase_input.get_text()
        repeat_passphrase = self.repeat_passphrase_input.get_text()
        if passphrase != repeat_passphrase:
            self.show_error(_("Passphrase mismatch."))
            return False
        elif len(passphrase) < 8:
            self.show_error(_("Passphrase must be at least 8 characters."))
            return False
        else:
            return True


class PersistenceTerminal(gtk.Frame):
    '''
    Just a scrolled terminal
    '''

    def __init__(self):
        gtk.Frame.__init__(self, _('Make persistence details'))

        self.term = vte.Terminal()
        self.term.set_emulation('xterm')

        scrollbar = gtk.VScrollbar()
        scrollbar.set_adjustment(self.term.get_adjustment())

        term_box = gtk.HBox()
        term_box.pack_start(self.term)
        term_box.pack_start(scrollbar)

        self.add(term_box)

    def fork_command(self, command):
        self.term.fork_command(command[0], command)

    def set_post_persistence(self, post_persistence):
        code = self.term.get_child_exit_status()
        self.term.connect('child-exited',
                 lambda term: post_persistence(code))


class VirtualizedWarning(gtk.HBox):

    def __init__(self):
        gtk.HBox.__init__(self, False, 6)
        text = _("Freepto seems running on a virtual machine. " +
                    "This could be a risk for your privacy.")
        icon = gtk.Image()
        icon.set_from_stock(gtk.STOCK_DIALOG_WARNING, gtk.ICON_SIZE_DIALOG)
        self.pack_start(icon, False)
        self.pack_start(gtk.Label(text), True)


class AbsentWidget(gtk.VBox):
    '''
    This widget is displayed when persistence is Absent and contains all stuff
    needed to create a new persistence.
    '''

    def __init__(self, icon):
        gtk.VBox.__init__(self, False, 6)
        self.icon = icon
        
        self.options_form = PersistenceOptionsForm()
        self.progress_bar = gtk.ProgressBar()
        self.progress_label = WrappedLabel()

        # Check the Freepto device
        if get_root_device() is not None:
            label = WrappedLabel(_("Persistence is not available, but you can create it. Fill the form and click on 'Create persistence'."))
            self.options_form.button.connect('clicked', self.make_persistence)
            self.add(label)
            self.add(self.options_form)
            self.add(self.progress_label)
            self.add(self.progress_bar)
            self.show_all()
            self.progress_bar.hide()
            self.progress_label.hide()
        else:
            label = WrappedLabel(_("Disk not found"))


    def make_persistence(self, widget, data=None):
        '''
        Create the persistence
        '''
        if not self.options_form.validate():
            return

        self.options_form.set_sensitive(False)
        self.progress_bar.set_fraction(0.5)
        self.progress_bar.set_text("Creating persistence...")
        self.progress_bar.show()

        passphrase = self.options_form.passphrase_input.get_text()
        fill_random = self.options_form.fill_random_input.get_active()
        command = ["makepersistence", "-p", passphrase, "%s2" % get_root_device()]
        if not fill_random:
            command.insert(1, "-r")
        if os.getuid() != 0:
            command = ["su-to-root", "-X", "-c", " ".join(command)]

        term = PersistenceTerminal()
        term.set_post_persistence(self.post_persistence)
        term.fork_command(command)

        self.add(term)
        self.show_all()

    def post_persistence(self, ret_code):
        '''
        Exectued when make persistence is done.
        '''
        self.icon.refresh()

        if ret_code == 0:
            self.progress_bar.set_fraction(1)
            self.progress_bar.set_text(_('Completed'))
            info = _('Persistence created! You must reboot the system to use it.')
            self.progress_label.set_markup(info)
            msg = gtk.MessageDialog(None, flags=gtk.DIALOG_MODAL,
                                    buttons=gtk.BUTTONS_OK,
                                    type=gtk.MESSAGE_INFO,
                                    message_format=info)
        else:
            info = _('Errors in persistence creation.\n\nCode: %s' % ret)
            self.progress_label.set_markup(info)
            msg = gtk.MessageDialog(None, flags=gtk.DIALOG_MODAL,
                                    buttons=gtk.BUTTONS_OK,
                                    type=gtk.MESSAGE_ERROR,
                                    message_format=info)
        self.progress_label.show()
        msg.run()
        msg.destroy()


#}}}


#{{{ Mounted widget

class MountedWidget(gtk.VBox):
    '''
    This widget is displayed when persistence is mounted.
    '''

    def __init__(self):
        Window.__init__(self)
        icon = gtk.Image()
        icon.set_from_stock(gtk.STOCK_YES, gtk.ICON_SIZE_DIALOG)
        label = WrappedLabel(_("Persistence available an Freepto is using it."))
        box = gtk.HBox(False, 6)
        box.pack_start(icon, False)
        box.pack_start(label, True)
        self.add(box)
        self.show_all()

#}}}


#{{{ Live widget

class LiveWidget(gtk.VBox):
    '''
    This widgets is displayed when persistence exists but is not mounted
    '''

    def __init__(self):
        gtk.VBox.__init__(self, False, 6)
        icon = gtk.Image()
        icon.set_from_stock(gtk.STOCK_NO, gtk.ICON_SIZE_DIALOG)

        label = WrappedLabel(_("Persistence available but Freepto is not using it. You must reboot the system to use persistence."))
        button = gtk.Button(_('Reboot the system'))
        button.connect('clicked', self.reboot_system)

        box = gtk.HBox(False, 6)
        box.pack_start(icon, False)
        box.pack_start(label, True)

        vbox = gtk.VBox(False, 6)
        vbox.pack_start(box, False)
        vbox.pack_start(button, False)
        self.add(vbox)
        self.show_all()

    def reboot_system(self, widget=None, data=None):
        call(['gksu', 'reboot'])
#}}}


#{{{ LiveIcon

class LiveIcon:
    '''
    A status icon with 3 possible statuses:
        MOUNTED
        LIVE
        ABSENT
    When clicking on it, the persistence helper window will be showed.
    '''

    def __init__(self):
        self.icon = gtk.StatusIcon()
        self.status = None
        self.dialog = None
        self.refresh()
        self.icon.connect("activate", self.show_persistence_helper)
        self.icon.connect("popup-menu", self.right_click_event)

    def refresh(self):
        '''
        Refresh the persistence status and the tray icon image
        '''
        self.refresh_persistence_status()
        if self.status == 'MOUNTED':
            self.icon.set_from_stock(gtk.STOCK_YES)
            self.icon.set_tooltip(_("Persistence mounted"))
        elif self.status == 'LIVE':
            self.icon.set_from_stock(gtk.STOCK_NO)
            self.icon.set_tooltip(_("Persistence not mounted, but available (maybe you want to reboot?)"))
        elif self.status == 'ABSENT':
            self.icon.set_from_stock(gtk.STOCK_CDROM)
            self.icon.set_tooltip(_("Persistence not available (do you want to create it?)"))
        else:
            self.icon.set_from_stock(gtk.STOCK_NEW)
            self.icon.set_tooltip(_('Checking...'))

    def refresh_persistence_status(self):
        '''
        Refresh the persistence status
        '''
        try:
            def sub_check(subcmd):
                ret = call(['check-persistence', subcmd])
                if ret == 0:
                    return True
                if ret == 10:
                    return False
                raise Exception('Error checking persistence status')
            if sub_check('is-mounted'):
                self.status = 'MOUNTED'
            elif sub_check('has-avail-persistence'):
                self.status = 'LIVE'
            else:
                self.status = 'ABSENT'
        except Exception:
            logging.exception("Status unknown")

    def right_click_event(self, icon, button, time):
        menu = gtk.Menu()
        quit = gtk.MenuItem(_("Quit"))
        quit.connect("activate", gtk.main_quit)
        menu.append(quit)
        menu.show_all()
        menu.popup(None, None, gtk.status_icon_position_menu,
                   button, time, self.icon)

    def show_persistence_helper(self, widget):
        '''
        Show the persistence helper window
        '''
        if self.dialog:
            logging.debug("already open")
            self.dialog.destroy()
            return

        persistence_helper = PersistenceHelper(self)
        persistence_helper.show_all()

#}}}


if __name__ == '__main__':
    import os
    os.environ['PATH'] += ':.'
    icon = LiveIcon()
    gtk.main()

# vim: set ft=python ts=4 sw=4 et fdm=marker:
